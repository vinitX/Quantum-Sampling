import tensorcircuit as tc
import jax
import jax.numpy as jnp
import numpy as np
import time

tc.set_backend("jax")
tc.set_dtype("complex128")

def two_qubit_gate(c, angle, qubit_1, qubit_2):
    c.cnot(qubit_1, qubit_2)
    c.rz(qubit_2, theta=angle)
    c.cnot(qubit_1, qubit_2)
    return c

def create_trotter_template(N, k, angles_u3, angles_2q):
    def circuit_template(s):
        c = tc.Circuit(N)
        
        # Initial X gates based on s (equivalent to Ry(0/Ï€))
        for q in range(N):
            if s[q] == 1:
                c.x(q)
                
        # Fixed U3 and 2-qubit gates
        for _ in range(k):
            # U3 gates
            for i in range(N):
                theta, phi, lamb = angles_u3[i*3], angles_u3[i*3+1], angles_u3[i*3+2]
                c.rz(i, theta=phi)
                c.ry(i, theta=theta)
                c.rz(i, theta=lamb)
            
            # 2-qubit gates
            for i in range(N):
                for j in range(i+1, N):
                    two_qubit_gate(c, angles_2q[i,j], i, j)
        
        return c

    return circuit_template

def main(N, sample_size):
    k = 24
    s = np.random.choice([1., -1.], size=N)
    
    # Generate fixed angles
    angles_u3 = np.random.uniform(0, 2*np.pi, 3*N)
    angles_2q = np.random.uniform(0, 2*np.pi, (N, N))
    
    # Create template circuit
    template = create_trotter_template(N, k, angles_u3, angles_2q)
    
    # JIT-compiled measurement function
    @jax.jit
    def sample(s):
        c = template(s)
        return c.state(), c.sample()

    # JIT-compiled update function
    @jax.jit
    def step(s, _):
        _, bits = sample(s)
        new_s = jnp.where(bits == 0, -1.0, 1.0)
        return new_s, None
    
    # Run simulation
    tim = time.time()
    final_s, _ = jax.lax.scan(step, jnp.array(s), None, length=sample_size)
    final_s.block_until_ready()  # For accurate timing
    
    print(f"Sampling Time: {time.time() - tim:.2f}s")
    return final_s


import argparse
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('N', type=int, help='The system size')
    parser.add_argument('--sample_size', type=int, default=100)

    args = parser.parse_args()
    main(args.N, args.sample_size)
    